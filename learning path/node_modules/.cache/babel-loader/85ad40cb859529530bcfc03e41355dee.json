{"ast":null,"code":"var _jsxFileName = \"C:\\\\Eclipse\\\\React\\\\learning path\\\\src\\\\components\\\\hooks\\\\UseEffectCleanup.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction UseEffectInner(props) {\n  // Pass useEffect a function\n  //const [randomFromParent, setRandomFromParent] = useState(0)\n  //const re = setRandomFromParent(props.theRandom)\n  const [random, setRandom] = useState(Math.random());\n  const [mounted, setMounted] = useState(true);\n\n  const reRender = () => setRandom(Math.random());\n\n  const toggle = () => setMounted(!mounted);\n\n  useEffect(() => {\n    console.log('render!');\n    return () => console.log('unmounting...');\n  }, [random]); //return \"I'm a lifecycle demo\";\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: reRender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"Re-render\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"Show/Hide LifecycleDemo\"));\n}\n\nfunction UseEffectOuter() {\n  // Set up a piece of state, so that we have\n  // a way to trigger a re-render.\n  const [random, setRandom] = useState(Math.random()); // Set up another piece of state to keep track of\n  // whether the LifecycleDemo is shown or hidden\n\n  const [mounted, setMounted] = useState(true); // This function will change the random number,\n  // and trigger a re-render (in the console,\n  // you'll see a \"render!\" from LifecycleDemo)\n\n  const reRender = () => setRandom(Math.random()); // This function will unmount and re-mount the\n  // LifecycleDemo, so you can see its cleanup function\n  // being called.\n\n\n  const toggle = () => setMounted(!mounted);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mounted && /*#__PURE__*/React.createElement(UseEffectInner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default UseEffectOuter;","map":{"version":3,"sources":["C:/Eclipse/React/learning path/src/components/hooks/UseEffectCleanup.js"],"names":["React","useState","useEffect","UseEffectInner","props","random","setRandom","Math","mounted","setMounted","reRender","toggle","console","log","UseEffectOuter"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B;AACA;AACA;AAGA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACM,IAAI,CAACF,MAAL,EAAD,CAApC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMS,QAAQ,GAAG,MAAMJ,SAAS,CAACC,IAAI,CAACF,MAAL,EAAD,CAAhC;;AACA,QAAMM,MAAM,GAAG,MAAMF,UAAU,CAAC,CAACD,OAAF,CAA/B;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAb;AACH,GAHQ,EAGP,CAACR,MAAD,CAHO,CAAT,CAV2B,CAc3B;;AACA,sBACI,uDACI;AAAQ,IAAA,OAAO,EAAEK,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAQ,IAAA,OAAO,EAAEC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,CADJ;AAOH;;AAED,SAASG,cAAT,GAA0B;AACtB;AACA;AACA,QAAM,CAACT,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACM,IAAI,CAACF,MAAL,EAAD,CAApC,CAHsB,CAKtB;AACA;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC,CAPsB,CAStB;AACA;AACA;;AACA,QAAMS,QAAQ,GAAG,MAAMJ,SAAS,CAACC,IAAI,CAACF,MAAL,EAAD,CAAhC,CAZsB,CActB;AACA;AACA;;;AACA,QAAMM,MAAM,GAAG,MAAMF,UAAU,CAAC,CAACD,OAAF,CAA/B;;AAEA,sBACI,0CAGKA,OAAO,iBAAI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhB,CADJ;AAOH;;AACD,eAAeM,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nfunction UseEffectInner(props) {\r\n    // Pass useEffect a function\r\n    //const [randomFromParent, setRandomFromParent] = useState(0)\r\n    //const re = setRandomFromParent(props.theRandom)\r\n\r\n\r\n    const [random, setRandom] = useState(Math.random());\r\n    const [mounted, setMounted] = useState(true);\r\n    const reRender = () => setRandom(Math.random());\r\n    const toggle = () => setMounted(!mounted);\r\n    useEffect(() => {\r\n        console.log('render!');\r\n        return () => console.log('unmounting...');\r\n    },[random])\r\n    //return \"I'm a lifecycle demo\";\r\n    return (\r\n        <>\r\n            <button onClick={reRender}>Re-render</button>\r\n            <button onClick={toggle}>Show/Hide LifecycleDemo</button>\r\n            {/*{mounted && <UseEffectInner />}*/}\r\n        </>\r\n    );\r\n}\r\n\r\nfunction UseEffectOuter() {\r\n    // Set up a piece of state, so that we have\r\n    // a way to trigger a re-render.\r\n    const [random, setRandom] = useState(Math.random());\r\n\r\n    // Set up another piece of state to keep track of\r\n    // whether the LifecycleDemo is shown or hidden\r\n    const [mounted, setMounted] = useState(true);\r\n\r\n    // This function will change the random number,\r\n    // and trigger a re-render (in the console,\r\n    // you'll see a \"render!\" from LifecycleDemo)\r\n    const reRender = () => setRandom(Math.random());\r\n\r\n    // This function will unmount and re-mount the\r\n    // LifecycleDemo, so you can see its cleanup function\r\n    // being called.\r\n    const toggle = () => setMounted(!mounted);\r\n\r\n    return (\r\n        <>\r\n            {/*<button onClick={reRender}>Re-render</button>*/}\r\n            {/*<button onClick={toggle}>Show/Hide LifecycleDemo</button>*/}\r\n            {mounted && <UseEffectInner />}\r\n        </>\r\n    );\r\n}\r\nexport default UseEffectOuter;\r\n"]},"metadata":{},"sourceType":"module"}