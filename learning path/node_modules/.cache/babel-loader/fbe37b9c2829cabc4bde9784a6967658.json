{"ast":null,"code":"var _jsxFileName = \"C:\\\\Eclipse\\\\React\\\\learning path\\\\src\\\\components\\\\hooks\\\\UseEffectCleanup.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction UseEffectInner() {\n  // Pass useEffect a function\n  const [randomFromParent, setRandomFromParent] = useState(0);\n  useEffect(() => {\n    // This gets called after every render, by default\n    // (the first one, and every one after that)\n    console.log('render!'); // If you want to implement componentWillUnmount,\n    // return a function from here, and React will call\n    // it prior to unmounting.\n\n    return () => console.log('unmounting...');\n  }, []);\n  return \"I'm a lifecycle demo\";\n}\n\nfunction UseEffectOuter() {\n  // Set up a piece of state, so that we have\n  // a way to trigger a re-render.\n  const [random, setRandom] = useState(Math.random()); // Set up another piece of state to keep track of\n  // whether the LifecycleDemo is shown or hidden\n\n  const [mounted, setMounted] = useState(true); // This function will change the random number,\n  // and trigger a re-render (in the console,\n  // you'll see a \"render!\" from LifecycleDemo)\n\n  const reRender = () => setRandom(Math.random()); // This function will unmount and re-mount the\n  // LifecycleDemo, so you can see its cleanup function\n  // being called.\n\n\n  const toggle = () => setMounted(!mounted);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: reRender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Re-render\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \"Show/Hide LifecycleDemo\"), mounted && /*#__PURE__*/React.createElement(UseEffectInner, {\n    theRandom: random,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default UseEffectOuter;","map":{"version":3,"sources":["C:/Eclipse/React/learning path/src/components/hooks/UseEffectCleanup.js"],"names":["React","useState","useEffect","UseEffectInner","randomFromParent","setRandomFromParent","console","log","UseEffectOuter","random","setRandom","Math","mounted","setMounted","reRender","toggle"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,SAASC,cAAT,GAA0B;AACtB;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CAAC,CAAD,CAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAHY,CAKZ;AACA;AACA;;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAb;AACH,GATQ,EASP,EATO,CAAT;AAWA,SAAO,sBAAP;AACH;;AAED,SAASC,cAAT,GAA0B;AACtB;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACU,IAAI,CAACF,MAAL,EAAD,CAApC,CAHsB,CAKtB;AACA;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CAPsB,CAStB;AACA;AACA;;AACA,QAAMa,QAAQ,GAAG,MAAMJ,SAAS,CAACC,IAAI,CAACF,MAAL,EAAD,CAAhC,CAZsB,CActB;AACA;AACA;;;AACA,QAAMM,MAAM,GAAG,MAAMF,UAAU,CAAC,CAACD,OAAF,CAA/B;;AAEA,sBACI,uDACI;AAAQ,IAAA,OAAO,EAAEE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAQ,IAAA,OAAO,EAAEC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,EAGKH,OAAO,iBAAI,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEH,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhB,CADJ;AAOH;;AACD,eAAeD,cAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nfunction UseEffectInner() {\r\n    // Pass useEffect a function\r\n    const [randomFromParent, setRandomFromParent] = useState(0)\r\n\r\n    useEffect(() => {\r\n        // This gets called after every render, by default\r\n        // (the first one, and every one after that)\r\n        console.log('render!');\r\n\r\n        // If you want to implement componentWillUnmount,\r\n        // return a function from here, and React will call\r\n        // it prior to unmounting.\r\n        return () => console.log('unmounting...');\r\n    },[])\r\n\r\n    return \"I'm a lifecycle demo\";\r\n}\r\n\r\nfunction UseEffectOuter() {\r\n    // Set up a piece of state, so that we have\r\n    // a way to trigger a re-render.\r\n    const [random, setRandom] = useState(Math.random());\r\n\r\n    // Set up another piece of state to keep track of\r\n    // whether the LifecycleDemo is shown or hidden\r\n    const [mounted, setMounted] = useState(true);\r\n\r\n    // This function will change the random number,\r\n    // and trigger a re-render (in the console,\r\n    // you'll see a \"render!\" from LifecycleDemo)\r\n    const reRender = () => setRandom(Math.random());\r\n\r\n    // This function will unmount and re-mount the\r\n    // LifecycleDemo, so you can see its cleanup function\r\n    // being called.\r\n    const toggle = () => setMounted(!mounted);\r\n\r\n    return (\r\n        <>\r\n            <button onClick={reRender}>Re-render</button>\r\n            <button onClick={toggle}>Show/Hide LifecycleDemo</button>\r\n            {mounted && <UseEffectInner theRandom={random}/>}\r\n        </>\r\n    );\r\n}\r\nexport default UseEffectOuter;\r\n"]},"metadata":{},"sourceType":"module"}